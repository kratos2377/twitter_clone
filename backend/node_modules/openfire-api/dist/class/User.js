"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var url_1 = require("url");
var helper_1 = require("../helper");
var User = /** @class */ (function () {
    function User(rest) {
        this.rest = rest;
        this.endPoint = 'users';
    }
    /**
     * Retrieve users
     * @description Endpoint to get all or filtered users
     */
    User.prototype.retriveUsers = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var searchParams, users;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        searchParams = new url_1.URLSearchParams(query);
                        return [4 /*yield*/, this.rest.get(this.endPoint, {
                                searchParams: searchParams.toString(),
                            })];
                    case 1:
                        users = (_a.sent());
                        return [2 /*return*/, users];
                }
            });
        });
    };
    /**
     * Retrieve a user
     * @description Endpoint to get information over a specific user
     */
    User.prototype.retriveUser = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var url, user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "users/" + username;
                        return [4 /*yield*/, this.rest.get(url)];
                    case 1:
                        user = (_a.sent());
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * Create a user
     * @description Endpoint to create a new user
     */
    User.prototype.createUser = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, statusCode, statusMessage;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.rest.post(this.endPoint, {
                            json: data,
                        })];
                    case 1:
                        _a = _b.sent(), statusCode = _a.statusCode, statusMessage = _a.statusMessage;
                        return [2 /*return*/, {
                                statusCode: statusCode,
                                statusMessage: statusMessage,
                            }];
                }
            });
        });
    };
    /**
     * Delete a user
     * @description Endpoint to delete a user
     */
    User.prototype.deleteUser = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var endPoint, _a, body, statusCode;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        endPoint = "users/" + username;
                        return [4 /*yield*/, this.rest.delete(endPoint)];
                    case 1:
                        _a = (_b.sent()), body = _a.body, statusCode = _a.statusCode;
                        return [2 /*return*/, {
                                body: body,
                                statusCode: statusCode,
                            }];
                }
            });
        });
    };
    /**
     * Update a user
     * @description Endpoint to update / rename a user
     */
    User.prototype.updateUser = function (username, data) {
        return __awaiter(this, void 0, void 0, function () {
            var endPoint, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endPoint = "users/" + username;
                        return [4 /*yield*/, this.rest.put(endPoint, { json: data })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.statusCode];
                }
            });
        });
    };
    /**
     * Retrieve all user groups
     * TODO : Add return type
     * @description Endpoint to get group names of a specific user
     */
    User.prototype.getUserGroups = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var url, groups;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.endPoint + "/users/" + username + "/groups";
                        return [4 /*yield*/, this.rest.get(url)];
                    case 1:
                        groups = _a.sent();
                        return [2 /*return*/, groups];
                }
            });
        });
    };
    /**
     * Add user to group
     * @description Endpoint to add user to a group
     */
    User.prototype.addUserToGroup = function (username, groupname) {
        return __awaiter(this, void 0, void 0, function () {
            var url, statusCode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.endPoint + "/" + username + "/groups/" + groupname;
                        return [4 /*yield*/, this.rest.post(url)];
                    case 1:
                        statusCode = (_a.sent()).statusCode;
                        return [2 /*return*/, statusCode];
                }
            });
        });
    };
    /**
     * Delete a user from a group
     * TODO add types
     * @description Endpoint to remove a user from a group
     */
    User.prototype.deleteUserFromGroup = function (username, groupname) {
        return __awaiter(this, void 0, void 0, function () {
            var url, statusCode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.endPoint + "/" + username + "/groups/" + groupname;
                        return [4 /*yield*/, this.rest.delete(url)];
                    case 1:
                        statusCode = (_a.sent()).statusCode;
                        return [2 /*return*/, statusCode];
                }
            });
        });
    };
    /**
     * Lockout a user
     * @description  Endpoint to lockout / ban the user from the chat server.
     * The user will be kicked if the user is online.
     */
    User.prototype.lockoutUser = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var url, statusCode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "lockouts/" + username;
                        return [4 /*yield*/, this.rest.post(url)];
                    case 1:
                        statusCode = (_a.sent()).statusCode;
                        return [2 /*return*/, statusCode];
                }
            });
        });
    };
    User.prototype.unlockUser = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var url, statusCode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "lockouts/" + username;
                        return [4 /*yield*/, this.rest.delete(url)];
                    case 1:
                        statusCode = (_a.sent()).statusCode;
                        return [2 /*return*/, statusCode];
                }
            });
        });
    };
    /**
     * Delete a user from a groups
     * TODO add types
     * @description Endpoint to remove a user from a groups
     */
    User.prototype.deleteUserFromGroups = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var url, _a, body, statusCode;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        url = this.endPoint + "/" + username + "/groups";
                        return [4 /*yield*/, this.rest.delete(url)];
                    case 1:
                        _a = (_b.sent()), body = _a.body, statusCode = _a.statusCode;
                        return [2 /*return*/, {
                                body: body,
                                statusCode: statusCode,
                            }];
                }
            });
        });
    };
    /**
     * Retrieve user roster
     * Endpoint to get roster entries (buddies) from a specific user
     */
    User.prototype.retriveUserRoster = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var endPoint, rosters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endPoint = this.endPoint + "/" + username + "/roster";
                        return [4 /*yield*/, this.rest.get(endPoint)];
                    case 1:
                        rosters = (_a.sent());
                        return [2 /*return*/, rosters];
                }
            });
        });
    };
    /**
     * Create a user roster entry
     * !not working
     */
    User.prototype.createUserRooster = function (username, rooster) {
        return __awaiter(this, void 0, void 0, function () {
            var url, body, statusCode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.endPoint + "/" + username + "/roster";
                        body = helper_1.default.makeRoosterBody(rooster);
                        console.log(body);
                        return [4 /*yield*/, this.rest.post(url, {
                                body: body,
                                headers: { 'Content-Type': 'application/xml' },
                            })];
                    case 1:
                        statusCode = (_a.sent()).statusCode;
                        return [2 /*return*/, statusCode];
                }
            });
        });
    };
    return User;
}());
exports.default = User;
//# sourceMappingURL=User.js.map