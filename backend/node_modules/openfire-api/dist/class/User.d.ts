import { Rest } from '../got';
import { IParamUser, IRetriveUserSearch, IRetriveUsersResponse, IUser } from './../interfaces/User';
import { RosterObject, RosterItem } from '../interfaces/Roster';
declare class User {
    private rest;
    private endPoint;
    constructor(rest: Rest);
    /**
     * Retrieve users
     * @description Endpoint to get all or filtered users
     */
    retriveUsers(query: IRetriveUserSearch): Promise<IRetriveUsersResponse>;
    /**
     * Retrieve a user
     * @description Endpoint to get information over a specific user
     */
    retriveUser(username: string): Promise<IUser>;
    /**
     * Create a user
     * @description Endpoint to create a new user
     */
    createUser(data: IParamUser): Promise<{
        statusMessage: string | undefined;
        statusCode: number;
    }>;
    /**
     * Delete a user
     * @description Endpoint to delete a user
     */
    deleteUser(username: string): Promise<{
        body: object;
        statusCode: number;
    }>;
    /**
     * Update a user
     * @description Endpoint to update / rename a user
     */
    updateUser(username: string, data: IParamUser): Promise<number>;
    /**
     * Retrieve all user groups
     * TODO : Add return type
     * @description Endpoint to get group names of a specific user
     */
    getUserGroups(username: string): Promise<Object>;
    /**
     * Add user to group
     * @description Endpoint to add user to a group
     */
    addUserToGroup(username: string, groupname: string): Promise<number>;
    /**
     * Delete a user from a group
     * TODO add types
     * @description Endpoint to remove a user from a group
     */
    deleteUserFromGroup(username: string, groupname: string): Promise<number>;
    /**
     * Lockout a user
     * @description  Endpoint to lockout / ban the user from the chat server.
     * The user will be kicked if the user is online.
     */
    lockoutUser(username: string): Promise<number>;
    unlockUser(username: string): Promise<number>;
    /**
     * Delete a user from a groups
     * TODO add types
     * @description Endpoint to remove a user from a groups
     */
    deleteUserFromGroups(username: string): Promise<Object>;
    /**
     * Retrieve user roster
     * Endpoint to get roster entries (buddies) from a specific user
     */
    retriveUserRoster(username: string): Promise<RosterObject>;
    /**
     * Create a user roster entry
     * !not working
     */
    createUserRooster(username: string, rooster: RosterItem): Promise<number>;
}
export default User;
