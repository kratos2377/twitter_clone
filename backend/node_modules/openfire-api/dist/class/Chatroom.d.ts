import { Rest } from '../got';
import { IChatroom, Roles, ChatroomsTypes } from '../interfaces/Chatroom';
/**
 * All the endpoints related to chatroom
 * @see https://www.igniterealtime.org/projects/openfire/plugins/1.3.8/restAPI/readme.html#chat-room-related-rest-endpoints
 */
declare class Chatroom {
    private rest;
    private endPoint;
    constructor(rest: Rest);
    /**
     * Create a chat room
     * @description Endpoint to create a new chat room.
     */
    createChatroom(data: IChatroom): Promise<{
        statusMessage: string | undefined;
        statusCode: number;
    }>;
    updateChatroom(data: IChatroom, servicename?: string): Promise<number>;
    /**
     * Retrieve a chat room
     * @description Endpoint to get information over specific chat room
     */
    getChatroom(roomname: string, servicename?: string): Promise<IChatroom>;
    /**
     * Retrieve chat room participants
     * @description Endpoint to get all participants with a role of specified room.
     */
    getChatroomParticipants(roomname: string, servicename?: string): Promise<Object>;
    /**
     * Retrieve chat room occupants
     * Endpoint to get all occupants (all roles / affiliations) of a specified room.
     */
    getChatroomOccupants(roomname: string, servicename?: string): Promise<Object>;
    /**
     * Retrieve chat room message history
     * @description Endpoint to get the chat message history of a specified room.
     */
    getChatroomHistory(roomname: string, servicename?: string): Promise<Object>;
    /**
     * Retrieve all chat rooms
     * @description Endpoint to get all chat rooms
     */
    getAllChatrooms(search?: string, type?: ChatroomsTypes, servicename?: string): Promise<Array<IChatroom>>;
    /**
     * Delete a chat room
     * @description Endpoint to delete a chat room.
     */
    deleteChatroom(roomname: string, servicename?: string): Promise<number>;
    /**
     * Add user with role to chat room
     * @description Endpoint to add a new user with role to a room.
     */
    addUserToChatroom(roomname: string, username: string, roles: Roles, servicename?: string): Promise<{
        statusCode: number;
        statusMessage: string | undefined;
    }>;
    /**
     * Add group with role to chat room
     * @description Endpoint to add a new group with role to a room.
     */
    addGroupToChatroom(roomname: string, groupname: string, roles: Roles, servicename?: string): Promise<{
        statusCode: number;
        statusMessage: string | undefined;
    }>;
    /**
     * Invite user to a chat Room
     * @description Endpoint to invite a user to a room.
     */
    inviteUserToChatroom(roomname: string, username: string, reason?: string): Promise<{
        statusCode: number;
        statusMessage: string | undefined;
    }>;
    /**
     * Delete a user from a chat room
     * Endpoint to remove a room user role.
     */
    deleteUserFromChatroom(roomname: string, username: string, roles: Roles, servicename?: string): Promise<number>;
}
export default Chatroom;
